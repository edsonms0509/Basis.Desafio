@page "/cadastro-assunto/{Id:int}"
@inject IAssuntoService assuntoService
@inject NavigationManager navigation
@inject IJSRuntime JsRuntime
@inherits CrudBase

<h5>Cadastro de Assunto - @Acao</h5>

<EditForm Model="model" OnSubmit="HandleSubmit">
    <div class="card p-3">
        <div class="row pb-2">
            <div class="col-12">
                <label class="form-label">Descrição</label>
                <input @bind="model.Descricao" 
                    placeholder="Digite a descrição do assunto..."
                    class="form-control"
                    maxlength="20" autocomplete="off" />
            </div>
        </div>
    </div>
    <div class="row text-center mt-2">
        <div class="col-12">
            <button class="btn btn-sm btn-outline-primary" type="submit" style="width: 100px;">
                <i class="bi bi-check-circle"></i> Salvar
            </button>
            <button class="btn btn-sm btn-outline-secondary" type="button" style="width: 100px;"
                @onclick="HandleInvokeVoltar">
                <i class="bi bi-arrow-left-circle"></i> Cancelar
            </button>
        </div>
    </div>
</EditForm>

@code {

    //model do formulário
    public Assunto model = new();
    public string Acao => Id == 0 ? "Inserindo" : "Alterando";
    
    protected override async Task OnInitializedAsync()
    {
        try
        {
            ExibirSpinner();

            //se Id for maior que 0, está editando, buscar os dados na base de dados
            if (Id > 0)
            {
                model = await assuntoService.GetItemByIdAsync(Id);
            }

            StateHasChanged();

        }
        catch (Exception ex)
        {
            Erro.UpdateMessage(ex.Message);
        }
        finally
        {
            OcultarSpinner();
        }
    }

    public async Task HandleSubmit()
    {
        try
        {
            ExibirSpinner();

            if (! await IsValidFields() )
            {
                return;
            }

            
            //se o código for zero, Insere, senão Atualiza
            if (model.CodAs == 0)
            {
                await assuntoService.Insert(model);
            }
            else
            {
                await assuntoService.Update(model);
            }

            //Toast
            await JsRuntime.InvokeVoidAsync("ShowToast", $"O assunto '{model.Descricao}' foi salvo com sucesso");
            
            //voltar para a lista de cadastrados
            HandleInvokeVoltar();
        }
        catch (Exception ex)
        {
            Erro.UpdateMessage(ex.Message);
        }
        finally
        {
            OcultarSpinner();
        }
    }


    private async Task<bool> IsValidFields()
    {
        IList<string> fields = new List<string>();
        
        if (string.IsNullOrEmpty(model.Descricao))
        {
            fields.Add(" * Descrição");
        }

        if (fields.Count > 0)
        {
            var fieldsInfo = String.Join("<br>", fields.ToArray());;
            await ToastValidationInfo(fieldsInfo);
            return false;
        }

        return true;
    }

    private async Task ToastValidationInfo(string fields)
    {
        await JsRuntime.InvokeVoidAsync("ShowToastWarning", $"<b>Necessário informar os campos:</b><br>{fields}.");
    }

    private void HandleInvokeVoltar()
    {
        navigation.NavigateTo($"/cadastro-assunto-lista");
    }

}